/**********************************************************************
 Grammar for moo programs
 **********************************************************************/
program         ::= declList          //done              
                ;                     //done

declList        ::= declList decl     //done
                | /* epsilon */       //done
                ;                     //done

decl            ::= varDecl           //done
                | fnDecl              //done
                | structDecl          //done// struct definitions only at top level
                ;                     //done

varDeclList     ::= varDeclList varDecl //done
                | /* epsilon */         //done
                ;                       //done

varDecl         ::= type id SEMICOLON     //done
                | STRUCT id id SEMICOLON  //done
                ;                         //done

fnDecl          ::= type id formals fnBody //done
                ;                          //done
                
structDecl      ::= STRUCT id LCURLY structBody RCURLY SEMICOLON //done
                ;                                                //done
                
structBody      ::= structBody varDecl                           //done
                | varDecl                                        //done
                ;                                                //done
                
formals         ::= LPAREN RPAREN                              //done
                | LPAREN formalsList RPAREN                    //done  
                ;                                              //done

formalsList     ::= formalDecl                                 //done
                | formalDecl COMMA formalsList                 //done
                ;                                              //done

formalDecl      ::= type id      // note: no struct parameters //done
                ;                                              //done

fnBody          ::= LCURLY varDeclList stmtList RCURLY         //done
                ;                                              //done

stmtList        ::= stmtList stmt                              //done
                | /* epsilon */                                //done
                ;                                              //done

stmt            ::= assignExp SEMICOLON                        //done
                | loc PLUSPLUS SEMICOLON                       //done
                | loc MINUSMINUS SEMICOLON                     //done
                | CIN READ loc SEMICOLON                       //done
                | COUT WRITE exp SEMICOLON                     //done
                | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY                                           
                | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
                | WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
                | RETURN exp SEMICOLON                         //done
                | RETURN SEMICOLON                             //done
                | fncall SEMICOLON                             //done
                ;                                              //done

assignExp       ::= loc ASSIGN exp
                ;
                
exp             ::= assignExp
                | exp PLUS exp
                | exp MINUS exp
                | exp TIMES exp
                | exp DIVIDE exp
                | NOT exp
                | exp AND exp
                | exp OR exp
                | exp EQUALS exp
                | exp NOTEQUALS exp
                | exp LESS exp
                | exp GREATER exp
                | exp LESSEQ exp
                | exp GREATEREQ exp
                | MINUS term
                | term
                ;

term            ::= loc
                | INTLITERAL
                | STRINGLITERAL
                | TRUE
                | FALSE
                | LPAREN exp RPAREN
                | fncall
                ;

fncall          ::=  id LPAREN RPAREN   // fn call with no args
                | id LPAREN actualList RPAREN  // with args
                ;

actualList      ::= exp
                | actualList COMMA exp
                ;

type            ::= INT                                                   //done
                | BOOL                                                    //done
                | VOID                                                    //done
                ;                                                         //done

loc             ::= id
                | loc DOT id

id              ::= ID                                                    //done
                ;                                                         //done

