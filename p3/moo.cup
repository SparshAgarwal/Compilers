/**********************************************************************
 Java CUP specification for a parser for moo programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) 
 */
terminal TokenVal       INT;  
terminal TokenVal       BOOL; 
terminal TokenVal       VOID; 
terminal TokenVal       TRUE; 
terminal TokenVal       FALSE; 
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 */
non terminal ProgramNode      program;       
non terminal LinkedList       declList;      
non terminal DeclNode         decl;         
non terminal LinkedList       varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode       fnDecl;        
non terminal StructDeclNode   structDecl;    
non terminal LinkedList       structBody;    
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode           term;
non terminal CallExpNode      fncall;
non terminal LinkedList       actualList;
non terminal TypeNode         type;           
non terminal ExpNode          loc;
non terminal IdNode           id;             
 
 
/* Precedence and associativity declarations 
*/
precedence left DOT;
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESSEQ,GREATEREQ,GREATER,LESS,EQUALS,NOTEQUALS;
precedence left PLUS,MINUS;
precedence left TIMES,DIVIDE;
precedence nonassoc NOT;

start with program;


/* Grammar with actions
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                |fnDecl:f
                {: RESULT = f;
                :}
                |structDecl:s
                {: RESULT = s;
                :}
                ;

varDeclList     ::= varDeclList:vl varDecl:v
                {: vl.addLast(v);
                   RESULT = vl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:sN id:i SEMICOLON
                {: RESULT = new VarDeclNode(new StructNode(sN), i, 0);
                :}
                ;

fnDecl          ::= type:t id:i formals:f fnBody:fB
                {: RESULT = new FnDeclNode(t, i, f, fB);
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:sB RCURLY SEMICOLON
                {: RESULT = new StructDeclNode(i,new DeclListNode(sB));
                :}
                ;

structBody      ::= structBody:sB varDecl:v
                {: sB.addLast(v);
                   RESULT = sB;
                :}
                | varDecl:v
                {: LinkedList sB = new LinkedList<DeclNode>();
                   sB.add(v);
                   RESULT = sB;
                :}
                ;
                
formals         ::= LPAREN RPAREN
                {: RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | LPAREN formalsList:fl RPAREN
                {: RESULT = new FormalsListNode(fl);
                :}
                ;

formalsList     ::= formalDecl:f
                {: LinkedList fl = new LinkedList<FormalDeclNode>();
                   fl.addLast(f);
                   RESULT = fl; 
                :}
                | formalDecl:f COMMA formalsList:fl
                {: fl.addLast(f);
                   RESULT = fl; 
                :}
                ;

formalDecl      ::= type:t id:i        // note: no struct parameters
                {:  RESULT = new FormalDeclNode(t,i);
                :}
                ;

fnBody          ::= LCURLY varDeclList:vl stmtList:sl RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(vl), new StmtListNode(sl));
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {: sl.addLast(s);
                   RESULT = sl; 
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;

stmt            ::= assignExp:ae SEMICOLON
                {: RESULT = new AssignStmtNode(ae);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {: RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:e SEMICOLON
                {: RESULT = new WriteStmtNode(e);
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vl stmtList:sl RCURLY
                {: RESULT = new IfStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | IF LPAREN exp:e RPAREN LCURLY varDeclList:vl1 stmtList:sl1 RCURLY ELSE LCURLY varDeclList:vl2 stmtList:sl2 RCURLY
                {: RESULT = new IfElseStmtNode(e, new DeclListNode(vl1), new StmtListNode(sl1), new DeclListNode(vl2), new StmtListNode(sl2));
                :}
                | WHILE LPAREN exp:e RPAREN LCURLY varDeclList:vl stmtList:sl RCURLY
                {: RESULT = new WhileStmtNode(e, new DeclListNode(vl), new StmtListNode(sl));
                :}
                | RETURN exp:e SEMICOLON
                {: RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {: RESULT = new ReadStmtNode(null);
                :}
                | fncall:fc SEMICOLON
                {: RESULT = new CallStmtNode(fc);
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {: RESULT = new AssignNode(l,e);
                :}
                ;
                
exp             ::= assignExp:ae
                {: RESULT = ae;
                :}
                | exp:e1 PLUS exp:e2
                {: RESULT = new PlusNode(e1,e2);
                :}
                | exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1,e2);
                :}
                | exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1,e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1,e2);
                :}
                | NOT exp:e1
                {: RESULT = new NotNode(e1);
                :}
                | exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1,e2);
                :}
                | exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1,e2);
                :}
                | exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1,e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1,e2);
                :}
                | exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1,e2);
                :}
                | exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1,e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1,e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1,e2);
                :}
                | MINUS term:t
                {: RESULT = new UnaryMinusNode(t);
                :}
                | term:t
                {: RESULT = t;
                :}
                ;

term            ::= loc:l
                {: RESULT = l;
                :}
                | INTLITERAL:i
                {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {: RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                | FALSE:f
                {: RESULT = new FalseNode(f.linenum, f.charnum);
                :}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
                | fncall:fc
                {: RESULT = fc;
                :}
                ;

fncall          ::=  id:i LPAREN RPAREN   // fn call with no args
                {: RESULT = new CallExpNode(i, null);
                :}
                | id:i LPAREN actualList:al RPAREN  // with args
                {: RESULT = new CallExpNode(i, new ExpListNode(al));
                :}
                ;

actualList      ::= exp:e
                {: LinkedList al = new LinkedList<ExpNode>();
                   al.add(e);
                   RESULT = al;
                :}
                | actualList:al COMMA exp:e
                {: al.addLast(e);
                   RESULT = al;
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

loc             ::= id:i
                {: RESULT = i;
                :}
                | loc:l DOT id:i
                {: RESULT = new DotAccessExpNode(l,i);
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
